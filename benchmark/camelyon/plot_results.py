from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import stats


def plot_linear_regression(data: pd.DataFrame, out_file: Path):
    """Generates and save as `out_file` a matplotlib figure of `data.connectlib_time.values` in function of
    `data.connectlib_time.values`. A linear regression is fit between those two features. Both line and equation
    are displayed.

    Args:
        data (pd.DataFrame): Must contains
        out_file (Path): File path to save the figure.
    """

    x = data.pure_torch_time.values
    y = data.connectlib_time.values

    if len(x) > 1:

        xmin = 0
        xmax = max(max(x), max(y) * 1.1)

        # regression part
        slope, intercept, r_value, _, _ = stats.linregress(x, y, alternative="greater")

        x_line = np.append(x, np.array([xmin, xmax]))
        x_line.sort()

        line = slope * x_line + intercept

        plt.gca().set_aspect("equal", adjustable="box")

        plt.xlabel("pure_torch torch computation time (s)")
        plt.ylabel("Connectlib computation time (s)")

        plt.plot(
            x_line,
            line,
            "g",
            label="y = {:.2f}x + {:.2f}   r = {:.2f}".format(slope, intercept, r_value),
        )

        plt.scatter(x, y, color="b", s=3.5)
        plt.legend(fontsize=9)

        plt.savefig(out_file)

    plt.close()


def plot_results(results: dict, folder: Path):
    """Generates the following plots, connectlib execution time in function of pure torch execution time for
    different kind of experiments.

    Args:
        results (dict): Results generated by the benchmark.py file.
        folder (Path): The folder where to save the generated plots.
    """
    n_rounds_cond = results["n_rounds"] == 11
    sub_sampling_cond = results["sub_sampling"] == 1
    n_local_steps_cond = results["n_local_steps"] == 50

    small_n_rounds_cond = results["n_rounds"] == 3
    small_n_local_steps_cond = results["n_local_steps"] == 10

    # Plot all
    plt.title("All experiments")

    plot_linear_regression(
        results,
        folder / "all.png",
    )

    # Plot for fixed number of rounds (11) and local steps (50)
    filtered_results = results[n_rounds_cond & n_local_steps_cond]

    plt.title(
        f"11 rounds, 50 local steps, sampling from {filtered_results.sub_sampling.min()} "
        f"to {filtered_results.sub_sampling.max()}."
    )

    plot_linear_regression(
        filtered_results,
        folder / "sampling.png",
    )

    # Plot for fixed number of rounds (3) and local steps (10)
    filtered_results = results[small_n_rounds_cond & small_n_local_steps_cond]
    plt.title(
        f"3 rounds, 10 local steps, sampling from {filtered_results.sub_sampling.min()} "
        f"to {filtered_results.sub_sampling.max()}."
    )

    plot_linear_regression(
        filtered_results,
        folder / "small_sampling.png",
    )

    # Plot for fixed number of steps (50) and subsampling (1)
    filtered_results = results[sub_sampling_cond & n_local_steps_cond]
    plt.title(
        "Rounds from "
        f"{filtered_results.n_rounds.min()} to {filtered_results.n_rounds.max()}, 50 local steps, whole dataset"
    )

    plot_linear_regression(
        filtered_results,
        folder / "rounds.png",
    )

    # Plot for fixed number of steps (10) and subsampling (1)
    filtered_results = results[sub_sampling_cond & small_n_local_steps_cond]

    plt.title(
        "Rounds from "
        f"{filtered_results.n_rounds.min()} to {filtered_results.n_rounds.max()}, 11 local steps, whole dataset"
    )

    plot_linear_regression(
        filtered_results,
        folder / "small_rounds.png",
    )

    # Fixed subsampling (1) and number of rounds (50)
    filtered_results = results[sub_sampling_cond & n_rounds_cond]

    plt.title(
        "Whole dataset, 50 rounds, number of steps from "
        f"{filtered_results.n_local_steps.min()} to {filtered_results.n_local_steps.max()}."
    )

    plot_linear_regression(
        filtered_results,
        folder / "local_steps.png",
    )

    # Fixed subsampling (1) and number of rounds (10)
    filtered_results = results[sub_sampling_cond & small_n_rounds_cond]

    plt.title(
        "Whole dataset, 11 rounds, number of steps from "
        f"{filtered_results.n_local_steps.min()} to {filtered_results.n_local_steps.max()}."
    )

    plot_linear_regression(
        filtered_results,
        folder / "small_local_steps.png",
    )

    # Small times
    filtered_results = results[results.pure_torch_time < 5 * 60]

    plt.title("Torch execution time < 5 minutes")

    plot_linear_regression(
        filtered_results,
        folder / "small_times.png",
    )

    # Medium times
    filtered_results = results[(results.pure_torch_time >= 5 * 60) & (results.pure_torch_time < 60 * 60)]

    plt.title("Torch execution time from 5 to 60 minutes")

    plot_linear_regression(
        filtered_results,
        folder / "medium_times.png",
    )

    # Big times
    filtered_results = results[results.pure_torch_time >= 60 * 60]

    plt.title("Torch execution time > 60 minutes")

    plot_linear_regression(
        filtered_results,
        folder / "big_times.png",
    )


if __name__ == "__main__":
    results_folder = Path(__file__).parent / "results"

    results = pd.read_json(results_folder / "results.json", orient="index")
    plot_results(results=results, folder=results_folder)
